{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "acfd012d-25a9-40b9-9477-931381d40666",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input: \"AKU CINTA KAMU\"\n",
      "Output: \"UKA ATNIC UMAK\"\n",
      "\n",
      "Input: \"PYTHON ITU MUDAH\"\n",
      "Output: \"NOHTYP UTI HADUM\"\n",
      "\n",
      "Input: \"PROGRAMMING ITU MENYENANGKAN SEKALI\"\n",
      "Output: \"GNIMMARGORP UTI NAKGNANEYNEM ILAKES\"\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##1. Mereverse setiap kata dalam kalimat\n",
    "\n",
    "def reverse_string(s): # INI fungsi string utk membalikan kata\n",
    "    reversed_s = \"\"\n",
    "    for char in s:\n",
    "        reversed_s = char + reversed_s\n",
    "    return reversed_s\n",
    "\n",
    "def reverse_per_kata(kalimat):\n",
    "    if not isinstance(kalimat, str):\n",
    "        raise TypeError(\"Input harus berupa string.\")\n",
    "    \n",
    "    kata_kata = kalimat.split(' ') # Memisahkan kalimat menjadi daftar kata berdasarkan spasi\n",
    "    kata_terbalik = []\n",
    "\n",
    "    for kata in kata_kata:\n",
    "        kata_terbalik.append(reverse_string(kata)) # Balik setiap kata menggunakan fungsi pembantu\n",
    "    \n",
    "    return ' '.join(kata_terbalik) # Menggabungkan kembali kata-kata yang sudah dibalik dengan spasi\n",
    "    \n",
    "#ini eksekusinya\n",
    "if __name__ == \"__main__\":\n",
    "    input_kalimat_1 = \"AKU CINTA KAMU\"\n",
    "    output_kalimat_1 = reverse_per_kata(input_kalimat_1)\n",
    "    print(f\"Input: \\\"{input_kalimat_1}\\\"\")\n",
    "    print(f\"Output: \\\"{output_kalimat_1}\\\"\\n\")\n",
    "\n",
    "    input_kalimat_2 = \"PYTHON ITU MUDAH\"\n",
    "    output_kalimat_2 = reverse_per_kata(input_kalimat_2)\n",
    "    print(f\"Input: \\\"{input_kalimat_2}\\\"\")\n",
    "    print(f\"Output: \\\"{output_kalimat_2}\\\"\\n\")\n",
    "\n",
    "    input_kalimat_3 = \"PROGRAMMING ITU MENYENANGKAN SEKALI\"\n",
    "    output_kalimat_3 = reverse_per_kata(input_kalimat_3)\n",
    "    print(f\"Input: \\\"{input_kalimat_3}\\\"\")\n",
    "    print(f\"Output: \\\"{output_kalimat_3}\\\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6a9f8be5-5e5d-4089-8645-527c51a10f61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input kalimat: 'HARI INI SEDANG BELAJAR PYTHON'\n",
      "Input urutan: [5, 1, 4, 3, 2]\n",
      "Output: 'INI PYTHON BELAJAR SEDANG HARI'\n"
     ]
    }
   ],
   "source": [
    "## 2. Mengurutkan kata berdasarkan indeks list\n",
    "\n",
    "\n",
    "def urutkan_kalimat(kalimat, urutan):\n",
    "    \"\"\"\n",
    "    Mengurutkan kata dalam kalimat berdasarkan indeks list yang diberikan.\n",
    "\n",
    "    Args:\n",
    "        kalimat (str): String berisi beberapa kata.\n",
    "        urutan (list): List berisi angka (posisi baru dari kata-kata), dimulai dari 1.\n",
    "\n",
    "    Returns:\n",
    "        str: Kalimat baru yang kata-katanya diurutkan sesuai indeks dalam urutan.\n",
    "    \"\"\"\n",
    "    kata_kata = []\n",
    "    current_word = \"\"\n",
    "    for char in kalimat:\n",
    "        if char == ' ':\n",
    "            kata_kata.append(current_word)\n",
    "            current_word = \"\"\n",
    "        else:\n",
    "            current_word += char\n",
    "    kata_kata.append(current_word) # Tambahkan kata terakhir setelah loop selesai\n",
    "\n",
    "    # Periksa apakah panjang list urutan sesuai dengan jumlah kata\n",
    "    if len(urutan) != len(kata_kata):\n",
    "        return \"Error: Panjang urutan tidak sesuai dengan jumlah kata.\"\n",
    "\n",
    "    sorted_kata = [\"\"] * len(kata_kata) # Inisialisasi list dengan ukuran yang sesuai\n",
    "\n",
    "    for i in range(len(urutan)):\n",
    "        # Kurangi 1 dari indeks urutan karena list di Python dimulai dari 0\n",
    "        sorted_kata[urutan[i] - 1] = kata_kata[i]\n",
    "\n",
    "    return \" \".join(sorted_kata)\n",
    "\n",
    "# --- Contoh Uji Fungsi ---\n",
    "print(f\"Input kalimat: 'HARI INI SEDANG BELAJAR PYTHON'\")\n",
    "print(f\"Input urutan: [5, 1, 4, 3, 2]\")\n",
    "print(f\"Output: '{urutkan_kalimat('HARI INI SEDANG BELAJAR PYTHON', [5, 1, 4, 3, 2])}'\")\n",
    "# Output yang diharapkan: \"PYTHON HARI BELAJAR SEDANG INI\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9dd66a06-be68-40e2-a354-4e6d008e26d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Uji Fungsi ganti_vokal ---\n",
      "Input: 'Aku Cinta Kamu', Opsi: 1\n",
      "Output: 'Ak|_| C1nt4 K4m|_|'\n",
      "------------------------------\n",
      "Input: 'Aku Cinta Kamu', Opsi: 2\n",
      "Output: '4ku Cinta Kamu'\n",
      "------------------------------\n",
      "Input: 'BELAJAR PYTHON ITU ASYIK', Opsi: 1\n",
      "Output: 'BELAJAR PYTHON ITU ASYIK'\n",
      "------------------------------\n",
      "Input: 'BELAJAR PYTHON ITU ASYIK', Opsi: 2\n",
      "Output: 'B3L4J4R PYTH0N 1T|_| 4SY1K'\n"
     ]
    }
   ],
   "source": [
    "##3. Mengganti huruf vokal dengan simbol tertentu\n",
    "\n",
    "def ganti_vokal(kalimat, opsi):\n",
    "    \"\"\"\n",
    "    Mengganti huruf vokal dalam kalimat dengan simbol tertentu berdasarkan opsi.\n",
    "\n",
    "    Args:\n",
    "        kalimat (str): String input yang akan dimanipulasi.\n",
    "        opsi (int): Angka (1 atau 2) yang menentukan jenis vokal yang diubah.\n",
    "                    Jika 1: hanya huruf vokal kecil yang diubah.\n",
    "                    Jika 2: hanya huruf vokal kapital yang diubah.\n",
    "\n",
    "    Returns:\n",
    "        str: Kalimat dengan huruf vokal yang telah diganti.\n",
    "    \"\"\"\n",
    "    # Kamus (map) untuk penggantian vokal kecil\n",
    "    vokal_kecil_map = {'a': '4', 'i': '1', 'u': '|_|', 'e': '3', 'o': '0'}\n",
    "    # Kamus (map) untuk penggantian vokal kapital\n",
    "    vokal_kapital_map = {'A': '4', 'I': '1', 'U': '|_|', 'E': '3', 'O': '0'}\n",
    "\n",
    "    hasil_kalimat = \"\" # Siapkan string kosong untuk menampung hasil\n",
    "\n",
    "    for char in kalimat: # Loop setiap karakter dalam kalimat\n",
    "        if opsi == 1:\n",
    "            # Jika opsi 1, cek apakah karakter adalah vokal kecil yang ada di map\n",
    "            if char in vokal_kecil_map:\n",
    "                hasil_kalimat += vokal_kecil_map[char] # Ganti dengan simbol dari map\n",
    "            else:\n",
    "                hasil_kalimat += char # Jika bukan vokal kecil, biarkan apa adanya\n",
    "        elif opsi == 2:\n",
    "            # Jika opsi 2, cek apakah karakter adalah vokal kapital yang ada di map\n",
    "            if char in vokal_kapital_map:\n",
    "                hasil_kalimat += vokal_kapital_map[char] # Ganti dengan simbol dari map\n",
    "            else:\n",
    "                hasil_kalimat += char # Jika bukan vokal kapital, biarkan apa adanya\n",
    "        else:\n",
    "            # Jika opsi tidak valid, kembalikan pesan error\n",
    "            return \"Opsi tidak valid. Gunakan 1 untuk vokal kecil atau 2 untuk vokal kapital.\"\n",
    "\n",
    "    return hasil_kalimat\n",
    "\n",
    "# --- Contoh Penggunaan ---\n",
    "print(\"--- Uji Fungsi ganti_vokal ---\")\n",
    "\n",
    "kalimat_contoh = \"Aku Cinta Kamu\"\n",
    "\n",
    "# Uji dengan Opsi 1 (vokal kecil)\n",
    "output_opsi_1 = ganti_vokal(kalimat_contoh, 1)\n",
    "print(f\"Input: '{kalimat_contoh}', Opsi: 1\")\n",
    "print(f\"Output: '{output_opsi_1}'\")\n",
    "# Output yang diharapkan: \"Ak|_| C1nt4 K4m|_|\"\n",
    "\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Uji dengan Opsi 2 (vokal kapital)\n",
    "output_opsi_2 = ganti_vokal(kalimat_contoh, 2)\n",
    "print(f\"Input: '{kalimat_contoh}', Opsi: 2\")\n",
    "print(f\"Output: '{output_opsi_2}'\")\n",
    "# Output yang diharapkan: \"4ku Cinta Kamu\"\n",
    "\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Contoh dengan kalimat lain\n",
    "kalimat_lain = \"BELAJAR PYTHON ITU ASYIK\"\n",
    "\n",
    "output_opsi_1_lain = ganti_vokal(kalimat_lain, 1)\n",
    "print(f\"Input: '{kalimat_lain}', Opsi: 1\")\n",
    "print(f\"Output: '{output_opsi_1_lain}'\") # Output: \"B3l4j4r Pyth0n 1t|_| 4sy1k\"\n",
    "\n",
    "print(\"-\" * 30)\n",
    "\n",
    "output_opsi_2_lain = ganti_vokal(kalimat_lain, 2)\n",
    "print(f\"Input: '{kalimat_lain}', Opsi: 2\")\n",
    "print(f\"Output: '{output_opsi_2_lain}'\") # Output: \"B3L4J4R PYTH0N 1T|_| 4SY1K\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb4bd7f8-48d7-4e7f-8934-938c3fe54b13",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
